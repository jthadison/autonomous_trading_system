{
  "validation_summary": {
    "overall_status": "PASSED",
    "total_tests": 25,
    "passed_tests": 23,
    "failed_tests": 2,
    "success_rate": 92.0,
    "timestamp": "2025-07-08T23:16:51.442515+00:00"
  },
  "phase_results": {
    "Setup": {
      "passed": 3,
      "total": 3,
      "success_rate": 100.0
    },
    "Imports": {
      "passed": 7,
      "total": 7,
      "success_rate": 100.0
    },
    "Configuration": {
      "passed": 2,
      "total": 2,
      "success_rate": 100.0
    },
    "Adapters": {
      "passed": 3,
      "total": 3,
      "success_rate": 100.0
    },
    "Router": {
      "passed": 4,
      "total": 4,
      "success_rate": 100.0
    },
    "Universal Tools": {
      "passed": 2,
      "total": 3,
      "success_rate": 66.66666666666666
    },
    "Unknown": {
      "passed": 1,
      "total": 2,
      "success_rate": 50.0
    },
    "Performance": {
      "passed": 1,
      "total": 1,
      "success_rate": 100.0
    }
  },
  "detailed_results": {
    "Setup": [
      {
        "test_name": "Directory Structure",
        "passed": true,
        "error": null,
        "details": {
          "src/platform_abstraction": true,
          "src/platform_abstraction/adapters": true,
          "src/platform_abstraction/config": true,
          "src/platform_abstraction/tests": true
        },
        "execution_time_ms": 0.3139972686767578,
        "timestamp": "2025-07-08T23:16:45.206699+00:00"
      },
      {
        "test_name": "Required Files Exist",
        "passed": true,
        "error": null,
        "details": {
          "src/platform_abstraction/__init__.py": true,
          "src/platform_abstraction/models.py": true,
          "src/platform_abstraction/interface.py": true,
          "src/platform_abstraction/router.py": true,
          "src/platform_abstraction/universal_tools.py": true,
          "src/platform_abstraction/adapters/__init__.py": true,
          "src/platform_abstraction/adapters/base_adapter.py": true,
          "src/platform_abstraction/adapters/oanda_adapter.py": true
        },
        "execution_time_ms": 0.4267692565917969,
        "timestamp": "2025-07-08T23:16:45.207117+00:00"
      },
      {
        "test_name": "Python Path Setup",
        "passed": true,
        "error": null,
        "details": {
          "project_root_in_path": true,
          "can_import_src": true
        },
        "execution_time_ms": 0.01049041748046875,
        "timestamp": "2025-07-08T23:16:45.207636+00:00"
      }
    ],
    "Imports": [
      {
        "test_name": "Core Models Import",
        "passed": true,
        "error": null,
        "details": {
          "models_imported": true
        },
        "execution_time_ms": 5.624294281005859,
        "timestamp": "2025-07-08T23:16:45.207937+00:00"
      },
      {
        "test_name": "Interface Import",
        "passed": true,
        "error": null,
        "details": {
          "interface_imported": true
        },
        "execution_time_ms": 0.7970333099365234,
        "timestamp": "2025-07-08T23:16:45.213698+00:00"
      },
      {
        "test_name": "Router Import",
        "passed": true,
        "error": null,
        "details": {
          "router_imported": true
        },
        "execution_time_ms": 20.160675048828125,
        "timestamp": "2025-07-08T23:16:45.214597+00:00"
      },
      {
        "test_name": "Adapter Imports",
        "passed": true,
        "error": null,
        "details": {
          "base_adapter": true,
          "oanda_adapter": true
        },
        "execution_time_ms": 1496.4892864227295,
        "timestamp": "2025-07-08T23:16:45.234962+00:00"
      },
      {
        "test_name": "Universal Tools Import",
        "passed": true,
        "error": null,
        "details": {
          "universal_tools_imported": true
        },
        "execution_time_ms": 4666.584491729736,
        "timestamp": "2025-07-08T23:16:46.731656+00:00"
      },
      {
        "test_name": "Existing Imports",
        "passed": true,
        "error": null,
        "details": {
          "existing_imports_checked": true
        },
        "execution_time_ms": 0.028848648071289062,
        "timestamp": "2025-07-08T23:16:51.435326+00:00"
      },
      {
        "test_name": "Import Performance",
        "passed": true,
        "error": null,
        "details": {
          "import_time_ms": 4.767894744873047,
          "import_acceptable": true
        },
        "execution_time_ms": 4.784345626831055,
        "timestamp": "2025-07-08T23:16:51.437111+00:00"
      }
    ],
    "Configuration": [
      {
        "test_name": "Default Configuration",
        "passed": true,
        "error": null,
        "details": {
          "config_created": true,
          "primary_platform": "oanda",
          "has_platforms": false
        },
        "execution_time_ms": 0.027418136596679688,
        "timestamp": "2025-07-08T23:16:51.398611+00:00"
      },
      {
        "test_name": "Configuration Loading",
        "passed": true,
        "error": null,
        "details": {
          "router_created": true,
          "config_loaded": true
        },
        "execution_time_ms": 0.028133392333984375,
        "timestamp": "2025-07-08T23:16:51.398715+00:00"
      }
    ],
    "Adapters": [
      {
        "test_name": "Oanda Adapter Creation",
        "passed": true,
        "error": null,
        "details": {
          "adapter_created": true,
          "platform": "oanda",
          "connected": false
        },
        "execution_time_ms": 0.03886222839355469,
        "timestamp": "2025-07-08T23:16:51.399381+00:00"
      },
      {
        "test_name": "Adapter Registration",
        "passed": true,
        "error": null,
        "details": {
          "registry_working": true,
          "available_platforms": [
            "oanda"
          ],
          "oanda_registered": true
        },
        "execution_time_ms": 0.020503997802734375,
        "timestamp": "2025-07-08T23:16:51.399531+00:00"
      },
      {
        "test_name": "Interface Compliance",
        "passed": true,
        "error": null,
        "details": {
          "interface_compliant": true,
          "implemented_methods": {
            "connect": true,
            "disconnect": true,
            "health_check": true,
            "get_live_price": true,
            "get_account_info": true,
            "get_open_positions": true,
            "execute_market_trade": true,
            "execute_limit_trade": true
          }
        },
        "execution_time_ms": 0.04220008850097656,
        "timestamp": "2025-07-08T23:16:51.399731+00:00"
      }
    ],
    "Router": [
      {
        "test_name": "Router Creation",
        "passed": true,
        "error": null,
        "details": {
          "router_created": true,
          "global_router_available": true
        },
        "execution_time_ms": 0.04029273986816406,
        "timestamp": "2025-07-08T23:16:51.400305+00:00"
      },
      {
        "test_name": "Router Initialization",
        "passed": true,
        "error": null,
        "details": {
          "router_can_initialize": true,
          "config_loaded": true
        },
        "execution_time_ms": 0.02765655517578125,
        "timestamp": "2025-07-08T23:16:51.400440+00:00"
      },
      {
        "test_name": "Platform Selection",
        "passed": true,
        "error": null,
        "details": {
          "platform_selection_working": true,
          "selected_platform": "oanda"
        },
        "execution_time_ms": 0.025510787963867188,
        "timestamp": "2025-07-08T23:16:51.400560+00:00"
      },
      {
        "test_name": "Router Overhead",
        "passed": true,
        "error": null,
        "details": {
          "selection_time_100_calls_ms": 0.06461143493652344,
          "avg_selection_time_ms": 0.0006461143493652344,
          "performance_acceptable": true
        },
        "execution_time_ms": 0.09202957153320312,
        "timestamp": "2025-07-08T23:16:51.442011+00:00"
      }
    ],
    "Universal Tools": [
      {
        "test_name": "Tool Creation",
        "passed": true,
        "error": null,
        "details": {
          "tools_created": true,
          "tools_callable": {
            "execute_market_trade": false,
            "get_account_info": false
          }
        },
        "execution_time_ms": 0.019550323486328125,
        "timestamp": "2025-07-08T23:16:51.400870+00:00"
      },
      {
        "test_name": "Tool Signatures",
        "passed": false,
        "error": "Tool(name='execute_market_trade', description='Tool Name: execute_market_trade\\nTool Arguments: {\\'instrument\\': {\\'description\\': None, \\'type\\': \\'str\\'}, \\'side\\': {\\'description\\': None, \\'type\\': \\'str\\'}, \\'units\\': {\\'description\\': None, \\'type\\': \\'float\\'}, \\'stop_loss\\': {\\'description\\': None, \\'type\\': \\'Union[float, NoneType]\\'}, \\'take_profit\\': {\\'description\\': None, \\'type\\': \\'Union[float, NoneType]\\'}, \\'reason\\': {\\'description\\': None, \\'type\\': \\'str\\'}, \\'max_slippage\\': {\\'description\\': None, \\'type\\': \\'float\\'}, \\'platform_preference\\': {\\'description\\': None, \\'type\\': \\'Union[str, NoneType]\\'}}\\nTool Description: \\nExecute market order through platform abstraction layer.\\n\\nThis tool maintains the exact same interface your CrewAI agents already use,\\nbut now routes through the universal platform system instead of directly to Oanda.\\n\\nArgs:\\n    instrument: Trading instrument (e.g., \"EUR_USD\", \"US30_USD\")\\n    side: Trade side (\"buy\" or \"sell\")\\n    units: Position size in units\\n    stop_loss: Optional stop loss price\\n    take_profit: Optional take profit price\\n    reason: Reason for the trade\\n    max_slippage: Maximum acceptable slippage (0.1% default)\\n    platform_preference: Preferred platform (\"oanda\", \"metatrader5\", etc.)\\n\\nReturns:\\n    Dict with execution results in same format as before\\n', env_vars=[], args_schema=<class 'abc.Execute_Market_Trade'>, description_updated=False, cache_function=<function BaseTool.<lambda> at 0x0000029C67A46520>, result_as_answer=False, max_usage_count=None, current_usage_count=0, func=<function execute_market_trade at 0x0000029C70D8A840>) is not a callable object",
        "details": {
          "traceback": "Traceback (most recent call last):\n  File \"E:\\projects\\autonomous_trading_system\\test.py\", line 115, in _run_test\n    test_result = test_func(*args, **kwargs)\n  File \"E:\\projects\\autonomous_trading_system\\test.py\", line 558, in _test_tool_signatures\n    sig = inspect.signature(execute_market_trade)\n  File \"C:\\Python313\\Lib\\inspect.py\", line 3349, in signature\n    return Signature.from_callable(obj, follow_wrapped=follow_wrapped,\n           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                                   globals=globals, locals=locals, eval_str=eval_str)\n                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Python313\\Lib\\inspect.py\", line 3072, in from_callable\n    return _signature_from_callable(obj, sigcls=cls,\n                                    follow_wrapper_chains=follow_wrapped,\n                                    globals=globals, locals=locals, eval_str=eval_str)\n  File \"C:\\Python313\\Lib\\inspect.py\", line 2500, in _signature_from_callable\n    raise TypeError('{!r} is not a callable object'.format(obj))\nTypeError: Tool(name='execute_market_trade', description='Tool Name: execute_market_trade\\nTool Arguments: {\\'instrument\\': {\\'description\\': None, \\'type\\': \\'str\\'}, \\'side\\': {\\'description\\': None, \\'type\\': \\'str\\'}, \\'units\\': {\\'description\\': None, \\'type\\': \\'float\\'}, \\'stop_loss\\': {\\'description\\': None, \\'type\\': \\'Union[float, NoneType]\\'}, \\'take_profit\\': {\\'description\\': None, \\'type\\': \\'Union[float, NoneType]\\'}, \\'reason\\': {\\'description\\': None, \\'type\\': \\'str\\'}, \\'max_slippage\\': {\\'description\\': None, \\'type\\': \\'float\\'}, \\'platform_preference\\': {\\'description\\': None, \\'type\\': \\'Union[str, NoneType]\\'}}\\nTool Description: \\nExecute market order through platform abstraction layer.\\n\\nThis tool maintains the exact same interface your CrewAI agents already use,\\nbut now routes through the universal platform system instead of directly to Oanda.\\n\\nArgs:\\n    instrument: Trading instrument (e.g., \"EUR_USD\", \"US30_USD\")\\n    side: Trade side (\"buy\" or \"sell\")\\n    units: Position size in units\\n    stop_loss: Optional stop loss price\\n    take_profit: Optional take profit price\\n    reason: Reason for the trade\\n    max_slippage: Maximum acceptable slippage (0.1% default)\\n    platform_preference: Preferred platform (\"oanda\", \"metatrader5\", etc.)\\n\\nReturns:\\n    Dict with execution results in same format as before\\n', env_vars=[], args_schema=<class 'abc.Execute_Market_Trade'>, description_updated=False, cache_function=<function BaseTool.<lambda> at 0x0000029C67A46520>, result_as_answer=False, max_usage_count=None, current_usage_count=0, func=<function execute_market_trade at 0x0000029C70D8A840>) is not a callable object\n"
        },
        "execution_time_ms": 0.056743621826171875,
        "timestamp": "2025-07-08T23:16:51.400983+00:00"
      },
      {
        "test_name": "Async Runner",
        "passed": true,
        "error": null,
        "details": {
          "async_runner_working": true,
          "test_result": true
        },
        "execution_time_ms": 26.9927978515625,
        "timestamp": "2025-07-08T23:16:51.407693+00:00"
      }
    ],
    "Unknown": [
      {
        "test_name": "Function Signatures",
        "passed": false,
        "error": "Tool(name='execute_market_trade', description='Tool Name: execute_market_trade\\nTool Arguments: {\\'instrument\\': {\\'description\\': None, \\'type\\': \\'str\\'}, \\'side\\': {\\'description\\': None, \\'type\\': \\'str\\'}, \\'units\\': {\\'description\\': None, \\'type\\': \\'float\\'}, \\'stop_loss\\': {\\'description\\': None, \\'type\\': \\'Union[float, NoneType]\\'}, \\'take_profit\\': {\\'description\\': None, \\'type\\': \\'Union[float, NoneType]\\'}, \\'reason\\': {\\'description\\': None, \\'type\\': \\'str\\'}, \\'max_slippage\\': {\\'description\\': None, \\'type\\': \\'float\\'}, \\'platform_preference\\': {\\'description\\': None, \\'type\\': \\'Union[str, NoneType]\\'}}\\nTool Description: \\nExecute market order through platform abstraction layer.\\n\\nThis tool maintains the exact same interface your CrewAI agents already use,\\nbut now routes through the universal platform system instead of directly to Oanda.\\n\\nArgs:\\n    instrument: Trading instrument (e.g., \"EUR_USD\", \"US30_USD\")\\n    side: Trade side (\"buy\" or \"sell\")\\n    units: Position size in units\\n    stop_loss: Optional stop loss price\\n    take_profit: Optional take profit price\\n    reason: Reason for the trade\\n    max_slippage: Maximum acceptable slippage (0.1% default)\\n    platform_preference: Preferred platform (\"oanda\", \"metatrader5\", etc.)\\n\\nReturns:\\n    Dict with execution results in same format as before\\n', env_vars=[], args_schema=<class 'abc.Execute_Market_Trade'>, description_updated=False, cache_function=<function BaseTool.<lambda> at 0x0000029C67A46520>, result_as_answer=False, max_usage_count=None, current_usage_count=0, func=<function execute_market_trade at 0x0000029C70D8A840>) is not a callable object",
        "details": {
          "traceback": "Traceback (most recent call last):\n  File \"E:\\projects\\autonomous_trading_system\\test.py\", line 115, in _run_test\n    test_result = test_func(*args, **kwargs)\n  File \"E:\\projects\\autonomous_trading_system\\test.py\", line 634, in _test_function_signatures\n    sig = inspect.signature(execute_market_trade)\n  File \"C:\\Python313\\Lib\\inspect.py\", line 3349, in signature\n    return Signature.from_callable(obj, follow_wrapped=follow_wrapped,\n           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                                   globals=globals, locals=locals, eval_str=eval_str)\n                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Python313\\Lib\\inspect.py\", line 3072, in from_callable\n    return _signature_from_callable(obj, sigcls=cls,\n                                    follow_wrapper_chains=follow_wrapped,\n                                    globals=globals, locals=locals, eval_str=eval_str)\n  File \"C:\\Python313\\Lib\\inspect.py\", line 2500, in _signature_from_callable\n    raise TypeError('{!r} is not a callable object'.format(obj))\nTypeError: Tool(name='execute_market_trade', description='Tool Name: execute_market_trade\\nTool Arguments: {\\'instrument\\': {\\'description\\': None, \\'type\\': \\'str\\'}, \\'side\\': {\\'description\\': None, \\'type\\': \\'str\\'}, \\'units\\': {\\'description\\': None, \\'type\\': \\'float\\'}, \\'stop_loss\\': {\\'description\\': None, \\'type\\': \\'Union[float, NoneType]\\'}, \\'take_profit\\': {\\'description\\': None, \\'type\\': \\'Union[float, NoneType]\\'}, \\'reason\\': {\\'description\\': None, \\'type\\': \\'str\\'}, \\'max_slippage\\': {\\'description\\': None, \\'type\\': \\'float\\'}, \\'platform_preference\\': {\\'description\\': None, \\'type\\': \\'Union[str, NoneType]\\'}}\\nTool Description: \\nExecute market order through platform abstraction layer.\\n\\nThis tool maintains the exact same interface your CrewAI agents already use,\\nbut now routes through the universal platform system instead of directly to Oanda.\\n\\nArgs:\\n    instrument: Trading instrument (e.g., \"EUR_USD\", \"US30_USD\")\\n    side: Trade side (\"buy\" or \"sell\")\\n    units: Position size in units\\n    stop_loss: Optional stop loss price\\n    take_profit: Optional take profit price\\n    reason: Reason for the trade\\n    max_slippage: Maximum acceptable slippage (0.1% default)\\n    platform_preference: Preferred platform (\"oanda\", \"metatrader5\", etc.)\\n\\nReturns:\\n    Dict with execution results in same format as before\\n', env_vars=[], args_schema=<class 'abc.Execute_Market_Trade'>, description_updated=False, cache_function=<function BaseTool.<lambda> at 0x0000029C67A46520>, result_as_answer=False, max_usage_count=None, current_usage_count=0, func=<function execute_market_trade at 0x0000029C70D8A840>) is not a callable object\n"
        },
        "execution_time_ms": 0.07677078247070312,
        "timestamp": "2025-07-08T23:16:51.435457+00:00"
      },
      {
        "test_name": "Return Formats",
        "passed": true,
        "error": null,
        "details": {
          "return_format_compatible": true,
          "note": "Return formats converted to legacy format for compatibility"
        },
        "execution_time_ms": 0.031232833862304688,
        "timestamp": "2025-07-08T23:16:51.436757+00:00"
      }
    ],
    "Performance": [
      {
        "test_name": "Memory Usage",
        "passed": true,
        "error": null,
        "details": {
          "memory_usage_mb": 311.0703125,
          "memory_acceptable": true
        },
        "execution_time_ms": 0.080108642578125,
        "timestamp": "2025-07-08T23:16:51.442196+00:00"
      }
    ]
  },
  "recommendations": [
    "\u2705 Platform abstraction layer is ready for use!",
    "\ud83d\udee0\ufe0f Universal Tools issues: Check tool implementations",
    "\ud83d\udccb Next steps:",
    "   1. Update your crew.py imports",
    "   2. Test with existing backtests",
    "   3. Verify live trading functionality",
    "   4. Monitor performance in production"
  ]
}